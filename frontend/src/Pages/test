import React, { useState, useEffect } from 'react';

function ResultsPage() {
  // الحالة العامة
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  // مودالات
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [showRegisterModal, setShowRegisterModal] = useState(false);
  const [showCommandeModal, setShowCommandeModal] = useState(false);

  // بيانات تسجيل الدخول
  const [loginData, setLoginData] = useState({ email: '', password: '' });
  // بيانات التسجيل
  const [registerData, setRegisterData] = useState({
    name: '',
    email: '',
    password: '',
    password_confirmation: '',
  });

  // بيانات الطلب
  const [commandeData, setCommandeData] = useState({
    nom: '',
    prenom: '',
    telephone: '',
    adresse: '',
    immobilier_id: null,
  });

  // مودال الرسائل
  const [messageModal, setMessageModal] = useState({ visible: false, text: '' });

  // العقار المختار
  const [selectedProperty, setSelectedProperty] = useState(null);

  // جلب النتائج من localStorage
  useEffect(() => {
    const storedResults = localStorage.getItem('immobilierResults');
    if (storedResults) {
      setResults(JSON.parse(storedResults));
    }
  }, []);

  // فتح مودال الطلب مع تعيين immobilier_id
  const openCommandeModal = (immobilier) => {
    setCommandeData({
      nom: '',
      prenom: '',
      telephone: '',
      adresse: '',
      immobilier_id: immobilier.id,
    });
    setShowCommandeModal(true);
  };

  // دوال مودال الرسائل
  const showMessage = (msg) => setMessageModal({ visible: true, text: msg });
  const closeMessage = () => setMessageModal({ visible: false, text: '' });

  // تسجيل الدخول
  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const res = await fetch('http://localhost:8000/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(loginData),
      });
      const data = await res.json();
      if (res.ok) {
        localStorage.setItem('auth_token', data.access_token);
        showMessage('تم تسجيل الدخول بنجاح');
        setShowLoginModal(false);
        setShowCommandeModal(true);
        setLoginData({ email: '', password: '' });
      } else {
        showMessage(data.message || 'خطأ في تسجيل الدخول');
      }
    } catch (error) {
      showMessage('خطأ في الاتصال بالخادم');
    }
    setLoading(false);
  };

  // التسجيل
  const handleRegisterSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const res = await fetch('http://localhost:8000/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(registerData),
      });
      const data = await res.json();
      if (res.ok) {
        showMessage('تم التسجيل بنجاح، يمكنك تسجيل الدخول الآن');
        setShowRegisterModal(false);
        setShowLoginModal(true);
        setRegisterData({ name: '', email: '', password: '', password_confirmation: '' });
      } else {
        showMessage(
          typeof data === 'object'
            ? Object.values(data).flat().join('\n')
            : data.message || 'خطأ في التسجيل'
        );
      }
    } catch (error) {
      showMessage('خطأ في الاتصال بالخادم');
    }
    setLoading(false);
  };

  // إرسال الطلب
  const handleCommandeSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('auth_token');
    if (!token) {
      showMessage('يجب تسجيل الدخول أولا');
      setShowCommandeModal(false);
      setShowLoginModal(true);
      return;
    }
    setLoading(true);
    try {
      const res = await fetch('http://localhost:8000/api/demandes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(commandeData),
      });
      const data = await res.json();
      if (res.ok) {
        showMessage('تم إرسال الطلب بنجاح');
        localStorage.removeItem('auth_token'); // تسجيل خروج تلقائي
        window.location.href = '/';
      } else {
        showMessage(data.message || 'خطأ في إرسال الطلب');
      }
    } catch (error) {
      showMessage('خطأ في الاتصال بالخادم');
    }
    setLoading(false);
    setShowCommandeModal(false);
  };

  return (
    <div>
      <h2>نتائج البحث</h2>
      <hr />
      <div className="properties-grid">
        {results.length === 0 && <p>لا توجد نتائج</p>}
        {results.map((item) => (
          <div className="property-card" key={item.id}>
            <div className="property-image">
              🏠
              <span className={`property-status ${item.etat.toLowerCase()}`}>
                {item.etat}
              </span>
            </div>
            <div className="property-content">
              <h3>{item.type}</h3>
              <div>📍 {item.ville}</div>
              <div>
                <span>{item.nbr_chambres} غرف</span> -{' '}
                <span>{item.nbr_salles_bain} حمامات</span> -{' '}
                <span>{item.surface} م²</span>
              </div>
              <div>{item.prix.toLocaleString()} درهم</div>
              <div>
                <button
                  onClick={() => {
                    if (item.etat === 'vendue') {
                      showMessage('عذراً، هذا العقار مباع');
                    } else {
                      openCommandeModal(item);
                    }
                  }}
                >
                  طلب
                </button>
                <button onClick={() => setSelectedProperty(item)}>تفاصيل</button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* مودال التفاصيل */}
      {selectedProperty && (
        <div className="details-modal">
          <div className="details-modal-content">
            <h3>تفاصيل العقار</h3>
            <p>النوع: {selectedProperty.type}</p>
            <p>المدينة: {selectedProperty.ville}</p>
            <p>عدد الغرف: {selectedProperty.nbr_chambres}</p>
            <p>عدد الحمامات: {selectedProperty.nbr_salles_bain}</p>
            <p>المساحة: {selectedProperty.surface} م²</p>
            <p>الحالة: {selectedProperty.etat}</p>
            <p>السعر: {selectedProperty.prix.toLocaleString()} درهم</p>
            <button onClick={() => setSelectedProperty(null)}>إغلاق</button>
          </div>
        </div>
      )}

      {/* مودال تسجيل الدخول */}
      {showLoginModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>تسجيل الدخول</h3>
            <form onSubmit={handleLoginSubmit}>
              <input
                type="email"
                placeholder="البريد الإلكتروني"
                value={loginData.email}
                onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}
                required
              />
              <input
                type="password"
                placeholder="كلمة السر"
                value={loginData.password}
                onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}
                required
              />
              <button type="submit" disabled={loading}>
                {loading ? 'جاري الإرسال...' : 'تسجيل الدخول'}
              </button>
              <button type="button" onClick={() => setShowLoginModal(false)}>
                إلغاء
              </button>
            </form>
            <p>
              ما عندكش حساب؟{' '}
              <span
                style={{ color: 'blue', cursor: 'pointer' }}
                onClick={() => {
                  setShowLoginModal(false);
                  setShowRegisterModal(true);
                }}
              >
                سجل هنا
              </span>
            </p>
          </div>
        </div>
      )}

      {/* مودال التسجيل */}
      {showRegisterModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>التسجيل</h3>
            <form onSubmit={handleRegisterSubmit}>
              <input
                type="text"
                placeholder="الاسم الكامل"
                value={registerData.name}
                onChange={(e) => setRegisterData({ ...registerData, name: e.target.value })}
                required
              />
              <input
                type="email"
                placeholder="البريد الإلكتروني"
                value={registerData.email}
                onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}
                required
              />
              <input
                type="password"
                placeholder="كلمة السر"
                value={registerData.password}
                onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}
                required
              />
              <input
                type="password"
                placeholder="تأكيد كلمة السر"
                value={registerData.password_confirmation}
                onChange={(e) =>
                  setRegisterData({ ...registerData, password_confirmation: e.target.value })
                }
                required
              />
              <button type="submit" disabled={loading}>
                {loading ? 'جاري الإرسال...' : 'التسجيل'}
              </button>
              <button type="button" onClick={() => setShowRegisterModal(false)}>
                إلغاء
              </button>
            </form>
            <p>
              عندك حساب؟{' '}
              <span
                style={{ color: 'blue', cursor: 'pointer' }}
                onClick={() => {
                  setShowRegisterModal(false);
                  setShowLoginModal(true);
                }}
              >
                سجل الدخول
              </span>
            </p>
          </div>
        </div>
      )}

      {/* مودال الطلب */}
      {showCommandeModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>طلب عقار</h3>
            <form onSubmit={handleCommandeSubmit}>
              <input
                type="text"
                placeholder="الاسم"
                value={commandeData.nom}
                onChange={(e) => setCommandeData({ ...commandeData, nom: e.target.value })}
                required
              />
              <input
                type="text"
                placeholder="اللقب"
                value={commandeData.prenom}
                onChange={(e) => setCommandeData({ ...commandeData, prenom: e.target.value })}
                required
              />
              <input
                type="tel"
                placeholder="رقم الهاتف"
                value={commandeData.telephone}
                onChange={(e) => setCommandeData({ ...commandeData, telephone: e.target.value })}
                required
              />
              <input
                type="text"
                placeholder="العنوان"
                value={commandeData.adresse}
                onChange={(e) => setCommandeData({ ...commandeData, adresse: e.target.value })}
                required
              />
              <button type="submit" disabled={loading}>
                {loading ? 'جاري الإرسال...' : 'إرسال الطلب'}
              </button>
              <button type="button" onClick={() => setShowCommandeModal(false)}>
                إلغاء
              </button>
            </form>
          </div>
        </div>
      )}

      {/* مودال الرسائل */}
      {messageModal.visible && (
        <div className="message-modal">
          <div className="message-content">
            <p>{messageModal.text}</p>
            <button onClick={closeMessage}>حسناً</button>
          </div>
        </div>
      )}
    </div>
  );
}

export default ResultsPage;
